/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
  Forc version: 0.66.5
  Fuel-Core version: 0.40.1
*/

import { ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions } from "fuels";

import { TestContract } from "./TestContract";

const bytecode = decompressBytecode("H4sIAAAAAAAAA61VTWgbRxR+Mqqztwy1DGFNydLKrtL0R03dItrQziItkrxxPTQ9CNpFOiSQnirUYAK97DHHptA2t/rgQ44ra5U4P5A95uhjjz7aEEMuBZUc3O/N7FrbIPcUg9mnNzPf+7735r2xX1TpJlGR9J9VS7+t4DgpiONjXiP7uaI7NE8DSWvdIyrYskf43g+a0f2gHhUGLbKW3DIJt8T+Xfh27UMiZ/IJdV7uz6mX+8WbVAjt+h6vP8L6I9UcVmGvqProLp+vuKVQNeN72vaKIWK1sU5prAc48wDxSMfyylK4RQn/Q/gfzoh1PY31GOuPEes27I8Ra2saa+xksVR97AB7O/AEzoinbOs4rVIovFII3zZ8T/GNcW4r8KNYbQxbA4Xz62+QcquWtt1FUvVIDBokKu6qxN6DwRXYXjEBj+2lBvAM723EPFDNEevldeZwW9vMDTbWKtmafShe1fcV62Muyh/WgPeuch0LsVhbAg6O4VAGh9HBNMZoksUImi8KwhOJ8uNIc2wXE3U1joDnQGcZ+T8D3GVVH05yWC2D1ZjF6ZLdBCd/1Mnw7EPn1T0XbH+PFpDTBeTabhFtNuht4N76H9xPGRecnmCfydHsnFxMaz6GzhuGc0POuBtWum+EmjxBXceo5+hCu/jNZovmoPvnzyShjiNrxtn3TN6jKng4ad34TjqcU1tGjPsn+3CXJ8jlPeTC0bl1HWdan9gCv4rJaZzgfEVjfQdbFmkF8W3ZB8ZwD3ifsw/fL7rP6TJq28P+c+YO71ja1jxi5pT6o18Mv2uh8ne4vuc0h3p0S9tuGXUf9jN/cDX6MNiIPkI+tC7RLoaL7XKCfBTQ/2fgm1tqr4asRayXk5UrRJW3GmQrcPR3nMG3rHFRCq9B2vaWJfQ5fNfB8Ub3SK53j6pfQ8MGOEQ5/tz7GX++W6l/3Jn6xx3kyGg2v2W2L3B7ReyV4PDMaEFum5GxPa2R76L2Q+NFaHwf9f6Ae1u0S6dptHIaJWsU7Ybstonnn8UzDrzRw7IFTTyj1qBpP6cpzGnie51p6uc09KGJa5T95l43+2ADw+DptYh7NsUYnpxBrS4pTwho74CD/9/+H6YzSPfsbq7/n53MmGacmwsxz6La6b1F75h7j33+zsT0t861MvONcz36a+ofpnOvnCDfX77pCbnsCvoNef7dMu+JXd8iu7lPmyb31kLbkdx/gUv85hS+N1+y/8b/P4Lu4twf2Ls2IcY5m+HcIZIZlvIx99LZg1qJylGZ5zHfaVGpx+gFzOZ0HfmbZ+xf+fwU/+wM/FoO/+R8Dp/fEYOPWNiT1gHa8TamMWqvM4Z+t2ADX+fnFPzzOfzeCX6rxzlygIua6Xw5FT9O1EYk8YY5lfXldJ6thil2L4d9nrGbqMu16/0ff/qBK8R/85f/Ba5AFTtICAAA");

export class TestContractFactory extends ContractFactory<TestContract> {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(
      bytecode,
      TestContract.abi,
      accountOrProvider,
      TestContract.storageSlots
    );
  }

  static deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ) {
    const factory = new TestContractFactory(wallet);
    return factory.deploy(options);
  }
}
